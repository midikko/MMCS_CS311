// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  MIL8A-202A-09
// DateTime: 25.10.2019 21:09:31
// UserName: user
// Input file <SimpleYacc.y - 25.10.2019 21:09:27>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,ASSIGN=6,
    SEMICOLON=7,REPEAT=8,UNTIL=9,WHILE=10,DO=11,IF=12,
    THEN=13,ELSE=14,FOR=15,TO=16,OPENP=17,CLOSEP=18,
    WRITE=19,VAR=20,COMMA=21,MINUS=22,PLUS=23,MULT=24,
    DELIM=25,INUM=26,RNUM=27,ID=28};

public struct ValueType
{ 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y - 25.10.2019 21:09:27
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public BlockNode root; // Êîðíåâîé óçåë ñèíòàêñè÷åñêîãî äåðåâà 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y - 25.10.2019 21:09:27

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[25];
  private static State[] states = new State[42];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "e1", "e2", "e3", "assign", "statement", "cycle", "repeat", 
      "stlist", "block", "progr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-12,1,-11,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{28,19,3,4,5,33,8,37},new int[]{-10,5,-7,41,-6,9,-2,10,-11,31,-8,32,-9,36});
    states[5] = new State(new int[]{4,6,7,7});
    states[6] = new State(-3);
    states[7] = new State(new int[]{28,19,3,4,5,33,8,37},new int[]{-7,8,-6,9,-2,10,-11,31,-8,32,-9,36});
    states[8] = new State(-9);
    states[9] = new State(-4);
    states[10] = new State(new int[]{6,11});
    states[11] = new State(new int[]{28,19,26,20,27,21,17,22},new int[]{-1,12,-3,13,-4,25,-5,28,-2,18});
    states[12] = new State(-12);
    states[13] = new State(new int[]{22,14,23,29,4,-13,7,-13,9,-13,18,-13,28,-13,3,-13,5,-13,8,-13});
    states[14] = new State(new int[]{28,19,26,20,27,21,17,22},new int[]{-4,15,-5,28,-2,18});
    states[15] = new State(new int[]{24,16,25,26,22,-15,23,-15,4,-15,7,-15,9,-15,18,-15,28,-15,3,-15,5,-15,8,-15});
    states[16] = new State(new int[]{28,19,26,20,27,21,17,22},new int[]{-5,17,-2,18});
    states[17] = new State(-18);
    states[18] = new State(-20);
    states[19] = new State(-11);
    states[20] = new State(-21);
    states[21] = new State(-22);
    states[22] = new State(new int[]{28,19,26,20,27,21,17,22},new int[]{-1,23,-3,13,-4,25,-5,28,-2,18});
    states[23] = new State(new int[]{18,24});
    states[24] = new State(-23);
    states[25] = new State(new int[]{24,16,25,26,22,-14,23,-14,4,-14,7,-14,9,-14,18,-14,28,-14,3,-14,5,-14,8,-14});
    states[26] = new State(new int[]{28,19,26,20,27,21,17,22},new int[]{-5,27,-2,18});
    states[27] = new State(-19);
    states[28] = new State(-17);
    states[29] = new State(new int[]{28,19,26,20,27,21,17,22},new int[]{-4,30,-5,28,-2,18});
    states[30] = new State(new int[]{24,16,25,26,22,-16,23,-16,4,-16,7,-16,9,-16,18,-16,28,-16,3,-16,5,-16,8,-16});
    states[31] = new State(-5);
    states[32] = new State(-6);
    states[33] = new State(new int[]{28,19,26,20,27,21,17,22},new int[]{-1,34,-3,13,-4,25,-5,28,-2,18});
    states[34] = new State(new int[]{28,19,3,4,5,33,8,37},new int[]{-7,35,-6,9,-2,10,-11,31,-8,32,-9,36});
    states[35] = new State(-24);
    states[36] = new State(-7);
    states[37] = new State(new int[]{28,19,3,4,5,33,8,37},new int[]{-10,38,-7,41,-6,9,-2,10,-11,31,-8,32,-9,36});
    states[38] = new State(new int[]{9,39,7,7});
    states[39] = new State(new int[]{28,19,26,20,27,21,17,22},new int[]{-1,40,-3,13,-4,25,-5,28,-2,18});
    states[40] = new State(-10);
    states[41] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-13, new int[]{-12,2});
    rules[2] = new Rule(-12, new int[]{-11});
    rules[3] = new Rule(-11, new int[]{3,-10,4});
    rules[4] = new Rule(-7, new int[]{-6});
    rules[5] = new Rule(-7, new int[]{-11});
    rules[6] = new Rule(-7, new int[]{-8});
    rules[7] = new Rule(-7, new int[]{-9});
    rules[8] = new Rule(-10, new int[]{-7});
    rules[9] = new Rule(-10, new int[]{-10,7,-7});
    rules[10] = new Rule(-9, new int[]{8,-10,9,-1});
    rules[11] = new Rule(-2, new int[]{28});
    rules[12] = new Rule(-6, new int[]{-2,6,-1});
    rules[13] = new Rule(-1, new int[]{-3});
    rules[14] = new Rule(-3, new int[]{-4});
    rules[15] = new Rule(-3, new int[]{-3,22,-4});
    rules[16] = new Rule(-3, new int[]{-3,23,-4});
    rules[17] = new Rule(-4, new int[]{-5});
    rules[18] = new Rule(-4, new int[]{-4,24,-5});
    rules[19] = new Rule(-4, new int[]{-4,25,-5});
    rules[20] = new Rule(-5, new int[]{-2});
    rules[21] = new Rule(-5, new int[]{26});
    rules[22] = new Rule(-5, new int[]{27});
    rules[23] = new Rule(-5, new int[]{17,-1,18});
    rules[24] = new Rule(-8, new int[]{5,-1,-7});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 4: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 5: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 6: // statement -> cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 7: // statement -> repeat
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 8: // stlist -> statement
{ 
				CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal); 
			}
        break;
      case 9: // stlist -> stlist, SEMICOLON, statement
{ 
				ValueStack[ValueStack.Depth-3].blVal.Add(ValueStack[ValueStack.Depth-1].stVal); 
				CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-3].blVal; 
			}
        break;
      case 10: // repeat -> REPEAT, stlist, UNTIL, expr
{
				CurrentSemanticValue.stVal = new RepeatNode(ValueStack[ValueStack.Depth-3].blVal as BlockNode, ValueStack[ValueStack.Depth-1].eVal as ExprNode);
			}
        break;
      case 11: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 12: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 13: // expr -> e1
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as ExprNode; }
        break;
      case 14: // e1 -> e2
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as ExprNode; }
        break;
      case 15: // e1 -> e1, MINUS, e2
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.MINUS);}
        break;
      case 16: // e1 -> e1, PLUS, e2
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.PLUS);}
        break;
      case 17: // e2 -> e3
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as ExprNode; }
        break;
      case 18: // e2 -> e2, MULT, e3
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.MULT);}
        break;
      case 19: // e2 -> e2, DELIM, e3
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.DELIM);}
        break;
      case 20: // e3 -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 21: // e3 -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 22: // e3 -> RNUM
{ CurrentSemanticValue.eVal = new DoubleNumNode(ValueStack[ValueStack.Depth-1].dVal); }
        break;
      case 23: // e3 -> OPENP, expr, CLOSEP
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal as ExprNode; }
        break;
      case 24: // cycle -> CYCLE, expr, statement
{ CurrentSemanticValue.stVal = new CycleNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
