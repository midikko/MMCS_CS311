// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  MIL8A-202A-08
// DateTime: 18.10.2019 21:14:50
// UserName: user
// Input file <SimpleYacc.y - 18.10.2019 21:14:42>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,INUM=6,
    RNUM=7,ID=8,ASSIGN=9,SEMICOLON=10,REPEAT=11,UNTIL=12,
    WHILE=13,DO=14,IF=15,THEN=16,ELSE=17,FOR=18,
    TO=19,OPENP=20,CLOSEP=21,WRITE=22,VAR=23,COMMA=24,
    MINUS=25,PLUS=26,MULT=27,DELIM=28};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public int yylval;
  public LexLocation yylloc;
  public ScanObj( int t, int val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<int, LexLocation>
{
  // Verbatim content from SimpleYacc.y - 18.10.2019 21:14:42
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public Parser(AbstractScanner<int, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y - 18.10.2019 21:14:42

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[37];
  private static State[] states = new State[71];
  private static string[] nonTerms = new string[] {
      "progr", "$accept", "block", "stlist", "statement", "assign", "cycle", 
      "repeat", "while", "if", "write", "var", "ident", "identlist", "expr", 
      "e1", "e2", "e3", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{8,19,3,4,5,33,11,37,13,43,18,47,15,54,22,61,23,66},new int[]{-4,5,-5,41,-6,9,-13,10,-3,31,-7,32,-8,36,-9,42,-10,53,-11,60,-12,65});
    states[5] = new State(new int[]{4,6,10,7});
    states[6] = new State(-28);
    states[7] = new State(new int[]{8,19,3,4,5,33,11,37,13,43,18,47,15,54,22,61,23,66},new int[]{-5,8,-6,9,-13,10,-3,31,-7,32,-8,36,-9,42,-10,53,-11,60,-12,65});
    states[8] = new State(-4);
    states[9] = new State(-5);
    states[10] = new State(new int[]{9,11});
    states[11] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-15,12,-16,13,-17,25,-18,28,-13,18});
    states[12] = new State(-16);
    states[13] = new State(new int[]{25,14,26,29,4,-17,10,-17,12,-17,17,-17,19,-17,21,-17,8,-17,3,-17,5,-17,11,-17,13,-17,18,-17,15,-17,22,-17,23,-17,14,-17,16,-17});
    states[14] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-17,15,-18,28,-13,18});
    states[15] = new State(new int[]{27,16,28,26,25,-19,26,-19,4,-19,10,-19,12,-19,17,-19,19,-19,21,-19,8,-19,3,-19,5,-19,11,-19,13,-19,18,-19,15,-19,22,-19,23,-19,14,-19,16,-19});
    states[16] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-18,17,-13,18});
    states[17] = new State(-22);
    states[18] = new State(-24);
    states[19] = new State(-13);
    states[20] = new State(-25);
    states[21] = new State(-26);
    states[22] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-15,23,-16,13,-17,25,-18,28,-13,18});
    states[23] = new State(new int[]{21,24});
    states[24] = new State(-27);
    states[25] = new State(new int[]{27,16,28,26,25,-18,26,-18,4,-18,10,-18,12,-18,17,-18,19,-18,21,-18,8,-18,3,-18,5,-18,11,-18,13,-18,18,-18,15,-18,22,-18,23,-18,14,-18,16,-18});
    states[26] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-18,27,-13,18});
    states[27] = new State(-23);
    states[28] = new State(-21);
    states[29] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-17,30,-18,28,-13,18});
    states[30] = new State(new int[]{27,16,28,26,25,-20,26,-20,4,-20,10,-20,12,-20,17,-20,19,-20,21,-20,8,-20,3,-20,5,-20,11,-20,13,-20,18,-20,15,-20,22,-20,23,-20,14,-20,16,-20});
    states[31] = new State(-6);
    states[32] = new State(-7);
    states[33] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-15,34,-16,13,-17,25,-18,28,-13,18});
    states[34] = new State(new int[]{8,19,3,4,5,33,11,37,13,43,18,47,15,54,22,61,23,66},new int[]{-5,35,-6,9,-13,10,-3,31,-7,32,-8,36,-9,42,-10,53,-11,60,-12,65});
    states[35] = new State(-29);
    states[36] = new State(-8);
    states[37] = new State(new int[]{8,19,3,4,5,33,11,37,13,43,18,47,15,54,22,61,23,66},new int[]{-4,38,-5,41,-6,9,-13,10,-3,31,-7,32,-8,36,-9,42,-10,53,-11,60,-12,65});
    states[38] = new State(new int[]{12,39,10,7});
    states[39] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-15,40,-16,13,-17,25,-18,28,-13,18});
    states[40] = new State(-30);
    states[41] = new State(-3);
    states[42] = new State(-9);
    states[43] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-15,44,-16,13,-17,25,-18,28,-13,18});
    states[44] = new State(new int[]{14,45});
    states[45] = new State(new int[]{8,19,3,4,5,33,11,37,13,43,18,47,15,54,22,61,23,66},new int[]{-5,46,-6,9,-13,10,-3,31,-7,32,-8,36,-9,42,-10,53,-11,60,-12,65});
    states[46] = new State(-31);
    states[47] = new State(new int[]{8,19},new int[]{-6,48,-13,10});
    states[48] = new State(new int[]{19,49});
    states[49] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-15,50,-16,13,-17,25,-18,28,-13,18});
    states[50] = new State(new int[]{14,51});
    states[51] = new State(new int[]{8,19,3,4,5,33,11,37,13,43,18,47,15,54,22,61,23,66},new int[]{-5,52,-6,9,-13,10,-3,31,-7,32,-8,36,-9,42,-10,53,-11,60,-12,65});
    states[52] = new State(-34);
    states[53] = new State(-10);
    states[54] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-15,55,-16,13,-17,25,-18,28,-13,18});
    states[55] = new State(new int[]{16,56});
    states[56] = new State(new int[]{8,19,3,4,5,33,11,37,13,43,18,47,15,54,22,61,23,66},new int[]{-5,57,-6,9,-13,10,-3,31,-7,32,-8,36,-9,42,-10,53,-11,60,-12,65});
    states[57] = new State(new int[]{17,58,4,-32,10,-32,12,-32});
    states[58] = new State(new int[]{8,19,3,4,5,33,11,37,13,43,18,47,15,54,22,61,23,66},new int[]{-5,59,-6,9,-13,10,-3,31,-7,32,-8,36,-9,42,-10,53,-11,60,-12,65});
    states[59] = new State(-33);
    states[60] = new State(-11);
    states[61] = new State(new int[]{20,62});
    states[62] = new State(new int[]{8,19,6,20,7,21,20,22},new int[]{-15,63,-16,13,-17,25,-18,28,-13,18});
    states[63] = new State(new int[]{21,64});
    states[64] = new State(-35);
    states[65] = new State(-12);
    states[66] = new State(new int[]{8,68},new int[]{-14,67});
    states[67] = new State(-36);
    states[68] = new State(new int[]{24,69,4,-14,10,-14,12,-14,17,-14});
    states[69] = new State(new int[]{8,68},new int[]{-14,70});
    states[70] = new State(-15);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-4, new int[]{-5});
    rules[4] = new Rule(-4, new int[]{-4,10,-5});
    rules[5] = new Rule(-5, new int[]{-6});
    rules[6] = new Rule(-5, new int[]{-3});
    rules[7] = new Rule(-5, new int[]{-7});
    rules[8] = new Rule(-5, new int[]{-8});
    rules[9] = new Rule(-5, new int[]{-9});
    rules[10] = new Rule(-5, new int[]{-10});
    rules[11] = new Rule(-5, new int[]{-11});
    rules[12] = new Rule(-5, new int[]{-12});
    rules[13] = new Rule(-13, new int[]{8});
    rules[14] = new Rule(-14, new int[]{8});
    rules[15] = new Rule(-14, new int[]{8,24,-14});
    rules[16] = new Rule(-6, new int[]{-13,9,-15});
    rules[17] = new Rule(-15, new int[]{-16});
    rules[18] = new Rule(-16, new int[]{-17});
    rules[19] = new Rule(-16, new int[]{-16,25,-17});
    rules[20] = new Rule(-16, new int[]{-16,26,-17});
    rules[21] = new Rule(-17, new int[]{-18});
    rules[22] = new Rule(-17, new int[]{-17,27,-18});
    rules[23] = new Rule(-17, new int[]{-17,28,-18});
    rules[24] = new Rule(-18, new int[]{-13});
    rules[25] = new Rule(-18, new int[]{6});
    rules[26] = new Rule(-18, new int[]{7});
    rules[27] = new Rule(-18, new int[]{20,-15,21});
    rules[28] = new Rule(-3, new int[]{3,-4,4});
    rules[29] = new Rule(-7, new int[]{5,-15,-5});
    rules[30] = new Rule(-8, new int[]{11,-4,12,-15});
    rules[31] = new Rule(-9, new int[]{13,-15,14,-5});
    rules[32] = new Rule(-10, new int[]{15,-15,16,-5});
    rules[33] = new Rule(-10, new int[]{15,-15,16,-5,17,-5});
    rules[34] = new Rule(-9, new int[]{18,-6,19,-15,14,-5});
    rules[35] = new Rule(-11, new int[]{22,20,-15,21});
    rules[36] = new Rule(-12, new int[]{23,-14});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
